{"name": "删除用户zy7y", "status": "broken", "statusDetails": {"message": "KeyError: 'case_005'", "trace": "self = <test.test_api.TestApiAuto object at 0x000002740E054470>\ncase_number = 'case_008', case_title = '删除用户zy7y', path = 'users'\nis_token = '读', method = 'delete', parametric_key = 'params', file_var = ''\nfile_path = '', parameters = '/{\"case_005\":\"$.data.id\"}', dependent = ''\ndata = '', expect = '{\"msg\": \"删除成功\", \"status\": 200}'\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path, parameters, dependent,data,expect', data_list)\n    def test_main(self, case_number, case_title, path, is_token, method, parametric_key, file_var,\n                  file_path, parameters, dependent, data, expect):\n    \n        # 感谢：https://www.cnblogs.com/yoyoketang/p/13386145.html，提供动态添加标题的实例代码\n        # 动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'⬇️⬇️⬇️...执行用例编号:{case_number}...⬇️⬇️⬇️️')\n        with allure.step(\"处理相关数据依赖，header\"):\n>           data, header, parameters_path_url = treat_data.treating_data(is_token, parameters, dependent, data, save_response_dict)\n\ntest_api.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tools.data_tearing.TreatingData object at 0x000002740E0FEA90>\nis_token = '读', parameters = '/{\"case_005\":\"$.data.id\"}', dependent = ''\ndata = None\nsave_response_dict = <tools.save_response.SaveResponse object at 0x000002740E0EE1D0>\n\n    def treating_data(self, is_token, parameters, dependent, data, save_response_dict):\n        # 使用那个header\n        if is_token == '':\n            header = self.no_token_header\n        else:\n            header = self.token_header\n        logger.info(f'处理依赖前data的数据:{data}')\n        # 处理依赖数据data\n        if dependent != '':\n            if dependent.find('=') != -1:\n                dependent_key = dependent.split('=')[0]\n                dependent_value = dependent.split('=')[1]\n                dependent_data = {dependent_key: save_response_dict.read_depend_data(dependent_value)}\n            else:\n                dependent_data = save_response_dict.read_depend_data(dependent)\n            logger.debug(f'依赖数据解析获得的字典{dependent_data}')\n            if data != '':\n                data = json.loads(data)\n                exists_key = False\n                # 处理data与依赖中有相同key的问题, 目前之支持列表，字典,本地 列表形式调试通过，需要在定义时，data中该key定义成列表\n                # 实例{\"id\": [1],\"user\":{\"username\":\"123\"}}\n                for k, v in data.items():\n                    for dk, dv in dependent_data.items():\n                        if k == dk:\n                            if isinstance(data[k], list):\n                                data[k].append(dv)\n                            if isinstance(data[k], dict):\n                                data[k].update(dv)\n                            exists_key = True\n                if exists_key is False:\n                    # 合并组成一个新的data\n                    dependent_data.update(data)\n                    data = dependent_data\n                    logger.info(f'data有数据，依赖有数据时 {data}')\n    \n            else:\n                # 赋值给data\n                data = dependent_data\n                logger.info(f'data无数据，依赖有数据时 {data}')\n        else:\n            if data == '':\n                data = None\n                logger.info(f'data无数据，依赖无数据时 {data}')\n            else:\n                data = json.loads(data)\n                logger.info(f'data有数据，依赖无数据 {data}')\n    \n        # 处理路径参数Path的依赖\n        # 传进来的参数类似 {\"case_002\":\"$.data.id\"}/item/{\"case_002\":\"$.meta.status\"}，进行列表拆分\n        path_list = parameters.split('/')\n        # 获取列表长度迭代\n        for i in range(len(path_list)):\n            # 按着\n            try:\n                # 尝试序列化成dict:   json.loads('2') 可以转换成2\n                path_dict = json.loads(path_list[i])\n            except JSONDecodeError as e:\n                # 序列化失败此path_list[i]的值不变化\n                logger.error(f'无法转换字典，进入下一个检查，本轮值不发生变化:{path_list[i]},{e}')\n                # 跳过进入下次循环\n                continue\n            else:\n                # 解析该字典，获得用例编号，表达式\n                logger.info(f'{path_dict}')\n                # 处理json.loads('数字')正常序列化导致的AttributeError\n                try:\n                    for k, v in path_dict.items():\n                        try:\n                            # 尝试从对应的case实际响应提取某个字段内容\n>                           path_list[i] = jsonpath.jsonpath(save_response_dict.actual_response[k], v)[0]\nE                           KeyError: 'case_005'\n\n..\\tools\\data_tearing.py:95: KeyError"}, "steps": [{"name": "处理相关数据依赖，header", "status": "broken", "statusDetails": {"message": "KeyError: 'case_005'\n", "trace": "  File \"E:\\apiAutoTest\\test\\test_api.py\", line 70, in test_main\n    data, header, parameters_path_url = treat_data.treating_data(is_token, parameters, dependent, data, save_response_dict)\n  File \"E:\\apiAutoTest\\tools\\data_tearing.py\", line 95, in treating_data\n    path_list[i] = jsonpath.jsonpath(save_response_dict.actual_response[k], v)[0]\n"}, "start": 1606447534123, "stop": 1606447534123}], "attachments": [{"name": "stderr", "source": "1e03383d-0b53-4a9e-b25e-2a150c9f50ab-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_number", "value": "'case_008'"}, {"name": "case_title", "value": "'删除用户zy7y'"}, {"name": "path", "value": "'users'"}, {"name": "is_token", "value": "'读'"}, {"name": "method", "value": "'delete'"}, {"name": "parametric_key", "value": "'params'"}, {"name": "file_var", "value": "''"}, {"name": "file_path", "value": "''"}, {"name": "parameters", "value": "'/{\"case_005\":\"$.data.id\"}'"}, {"name": "dependent", "value": "''"}, {"name": "data", "value": "''"}, {"name": "expect", "value": "'{\"msg\": \"删除成功\", \"status\": 200}'"}], "start": 1606447534122, "stop": 1606447534124, "uuid": "a56ee442-5ca1-434a-bd5e-6523f5be96c1", "historyId": "dbd3707df53d31253cd759bece2a58ef", "testCaseId": "c2b13641bbced8035cf0282bfb1839e4", "fullName": "test.test_api.TestApiAuto#test_main", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuto"}, {"name": "host", "value": "DESKTOP-O07PCGI"}, {"name": "thread", "value": "7740-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}